<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd    
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/aop
                        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<!-- 配置里面的注释也很详细，在此就不说了，主要是自动扫描控制器，视图模式，注解的启动这三个 -->

	<!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
	<!-- 扫描指定package下所有@controller 并把所注释的注册为Spring Beans -->
	<!-- 解决事物失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解 -->
	<context:component-scan base-package="com.my.schoollife.controller">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 日期格式转换 -->
	<!-- 日期转换 必须放在<mvc:annotation-driven />前面 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"> 
		<property name="webBindingInitializer"> <bean class="com.example.footballmanager.common.TextFormatDate" 
		/> </property> </bean> -->

	<!-- 配置springmvc 拦截器 -->
	<mvc:interceptors>
		<!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 -->
		<mvc:interceptor>
			<mvc:mapping path="/main/toIndex.do" />
			<!--定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 -->
			<bean class="com.my.schoollife.common.LoginInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>

	<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
	<!-- JSON转换器 -->
<!-- 	<bean -->
<!-- 		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"> -->
<!-- 		<property name="cacheSeconds" value="0" /> -->
<!-- 		<property name="messageConverters"> -->
<!-- 			<list> -->
<!-- 				避免IE执行AJAX时，返回JSON出现下载文件 -->
<!-- 				<bean -->
<!-- 					class="org.springframework.http.converter.StringHttpMessageConverter"> -->
<!-- 					<property name="supportedMediaTypes"> -->
<!-- 						<list> -->
<!-- 							<value>text/plain;charset=UTF-8</value> -->
<!-- 							<value>text/html;charset=UTF-8</value> -->
<!-- 							<value>application/json;charset=UTF-8</value> -->
<!-- 						</list> -->
<!-- 					</property> -->
<!-- 				</bean> -->
<!-- 				json适配器 把后台对象转换为json格式 -->
<!-- 				<bean -->
<!-- 					class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"> -->
<!-- 					<property name="objectMapper"> -->
<!-- 						<bean class="com.fasterxml.jackson.databind.ObjectMapper"> -->
<!-- 							<property name="dateFormat"> -->
<!-- 								<bean class="java.text.SimpleDateFormat"> -->
<!-- 									<constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss" /> -->
<!-- 								</bean> -->
<!-- 							</property> -->
<!-- 						</bean> -->
<!-- 					</property> -->
<!-- 				</bean> -->
<!-- 			</list> -->
<!-- 		</property> -->
<!-- 	</bean> -->

	<!-- 默认的注解映射的支持 -->
	<!-- 启用SpringMVC的注解功能,它会自动注册HandlerMapping、HandlerAdapter、ExceptionResolver的相关实例 -->
	<mvc:annotation-driven>
		<!-- 处理responseBody 里面日期类型 -->
		<mvc:message-converters>
			<bean
				class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="objectMapper">
					<bean class="com.fasterxml.jackson.databind.ObjectMapper">
						<property name="dateFormat">
							<bean class="java.text.SimpleDateFormat">
								<constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss" />
							</bean>
						</property>
					</bean>
				</property>
			</bean>
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>text/plain;charset=utf-8</value>
						<value>text/html;charset=UTF-8</value>
						<value>application/json;charset=utf-8</value>
					</list>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>
	<!-- 使控制器注解生效 -->
	<!-- 没有这个配置 @Controller 控制器不会生效 -->
	<mvc:annotation-driven />

	<!-- 定义跳转的文件的前后缀 ，视图模式配置 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 默认编码 -->
		<property name="defaultEncoding" value="utf-8" />
		<!-- 文件大小最大值 -->
		<property name="maxUploadSize" value="10485760000" />
		<!-- 内存中的最大值 -->
		<property name="maxInMemorySize" value="40960" />
	</bean>

	<!-- 捕获文件大小超出异常 -->
	<bean
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="java.lang.Exception">redirect:/error/sizeError.do</prop>
				<prop
					key="org.springframework.web.multipart.MaxUploadSizeExceededException">redirect:/error/sizeError.do</prop>
			</props>
		</property>
		<property name="defaultErrorView" value="redirect:/error/sizeError.do"></property>
		<property name="defaultStatusCode" value="500"></property>
	</bean>

	<!-- 这里设置静态的资源 -->
	<mvc:resources location="/js/" mapping="/js/**" />
	<mvc:resources location="/img/" mapping="/img/**" />
	<!-- <mvc:resources location="/fileupload/" mapping="/fileupload/**" /> -->
	<mvc:resources location="/css/" mapping="/css/**" />
</beans>